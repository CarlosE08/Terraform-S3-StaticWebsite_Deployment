name: 'Terraform AWS Modular'

on: [push, pull_request]

env:
  TF_LOG: INFO

permissions:
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        #working-directory: ./main

    steps:
    # Clona el repositorio
    - name: Checkout
      uses: actions/checkout@v2

    # Crea terraform.tfvars con valores desde los secrets
    - name: Generate terraform.tfvars from secrets
      run: |
        cat > terraform.tfvars <<EOF
        aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        region         = "${{ secrets.AWS_REGION }}"
        bucket_name    = "${{ secrets.BUCKET_NAME }}"
        EOF
      #working-directory: ./main

    # Instala Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.6

    # Inicializa Terraform
    - name: Terraform Init
      id: init
      run: terraform init

    # Verifica formato del cÃ³digo
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    # Valida sintaxis y dependencias
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Ejecuta `terraform plan` si es un Pull Request
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -var-file="terraform.tfvars" -no-color > plan.txt
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
        cat plan.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Publica el plan como comentario en el PR
    - name: Add Plan Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = process.env.PLAN_OUTPUT;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### ðŸ“– Terraform Plan\n\n\`\`\`hcl\n${output}\n\`\`\``
          });

    # Ejecuta `terraform apply` en push a main
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var-file="terraform.tfvars" -auto-approve
